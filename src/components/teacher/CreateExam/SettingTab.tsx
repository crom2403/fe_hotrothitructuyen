import QuillEditor from "@/components/common/QuillEditor";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormField } from "@/components/ui/form";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import useExamStore from "@/stores/examStore";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import useUpdateExamStore from "@/stores/updateExamStore";

const formSchema = z.object({
  instruction: z.string().min(10, "H∆∞·ªõng d·∫´n ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±"),
});

export function SettingsTab({ mode }: { mode: 'create' | 'update' }) {
  const store = mode === 'create' ? useExamStore : useUpdateExamStore;
  const {
    tab1Data,
    tab3Data,
    setIsShuffledQuestions,
    setIsShuffledAnswer,
    setAllowReview,
    setAllowReviewPoint,
    setShowCorrectAnswer,
    setInstruction,
  } = store();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      instruction: tab3Data.instruction || `
        <p><strong style="font-size: 18px;">üìå Ch√†o b·∫°n, tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu b√†i thi, vui l√≤ng ƒë·ªçc k·ªπ c√°c h∆∞·ªõng d·∫´n v√† n·ªôi quy sau:</strong></p>

        <ul>
          <li>
            <p style="font-size: 16px;">
              ‚è±Ô∏è <strong>Th·ªùi gian l√†m b√†i:</strong>
              <span style="color: red; font-size: 20px; font-weight: bold;">[xx] ph√∫t</span> |
              <strong>S·ªë c√¢u h·ªèi:</strong>
              <span style="color: red; font-size: 20px; font-weight: bold;">[xx] c√¢u</span> |
              <strong>H√¨nh th·ª©c:</strong> Tr·∫Øc nghi·ªám online.
            </p>
          </li>

          <li>
            <p style="font-size: 16px;">
              üïí Khi h·∫øt gi·ªù, h·ªá th·ªëng
              <span style="color: red; font-weight: bold;">t·ª± ƒë·ªông n·ªôp b√†i</span>. B·∫°n c≈©ng c√≥ th·ªÉ
              <strong>ch·ªß ƒë·ªông n·ªôp b√†i</strong> khi ƒë√£ ho√†n th√†nh.
            </p>
          </li>

          <li>
            <p style="color: red; font-size: 20px; font-weight: bold; text-align: center;">
              ‚ö†Ô∏è KH√îNG ƒê∆Ø·ª¢C tho√°t trang, t·∫£i l·∫°i tr√¨nh duy·ªát, ho·∫∑c s·ª≠ d·ª•ng ph·∫ßn m·ªÅm h·ªó tr·ª£/tham kh·∫£o kh√°c.
            </p>
          </li>

          <li>
            <p style="font-size: 16px;">
              ‚ùå N·∫øu tho√°t trang qu√°
              <span style="color: red; font-weight: bold; font-size: 18px;">[xx] l·∫ßn</span>, h·ªá th·ªëng s·∫Ω
              <span style="color: red; font-weight: bold;">t·ª± ƒë·ªông n·ªôp b√†i</span> v√†
              <strong>kh√¥ng ƒë∆∞·ª£c thi l·∫°i</strong>.
            </p>
          </li>

          <li>
            <p style="color: red; font-size: 18px; font-weight: bold;">
              üö´ M·ªåI H√ÄNH VI GIAN L·∫¨N nh∆∞ thi h·ªô, sao ch√©p b√†i l√†m s·∫Ω b·ªã h·ªßy k·∫øt qu·∫£ v√† x·ª≠ l√Ω theo quy ƒë·ªãnh.
            </p>
          </li>

          <li>
            <p style="font-size: 16px;">
              ‚úÖ <strong>ƒê·∫£m b·∫£o thi·∫øt b·ªã ho·∫°t ƒë·ªông t·ªët, k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh v√† kh√¥ng b·ªã l√†m phi·ªÅn khi ƒëang thi.</strong>
            </p>
          </li>
        </ul>

        <p style="text-align: center; font-size: 18px;">
          üëâ Khi ƒë√£ s·∫µn s√†ng, h√£y b·∫•m <span style="color: red; font-weight: bold;">"B·∫Øt ƒë·∫ßu l√†m b√†i"</span> ƒë·ªÉ b·∫Øt ƒë·∫ßu ph·∫ßn thi.
        </p>

        <p style="text-align: center; font-size: 18px; font-weight: bold;">üéØ Ch√∫c b·∫°n l√†m b√†i th·∫≠t t·ªët!</p>
      `,
    },
  });

  // C·∫≠p nh·∫≠t n·ªôi dung ƒë·ªông khi component mount v√† khi tab1Data thay ƒë·ªïi
  useEffect(() => {
    const updateInstruction = (content: string) => {
      const duration = tab1Data.duration_minutes || "[xx]";
      const totalQuestions = tab1Data.total_questions || "[xx]";
      const maxTabSwitch = tab1Data.max_tab_switch || "[xx]";

      let updatedContent = content
        .replace(
          /\[xx\] ph√∫t/g,
          `${duration} ph√∫t`
        )
        .replace(
          /\[xx\] c√¢u/g,
          `${totalQuestions} c√¢u`
        )
        .replace(
          /\[xx\] l·∫ßn/g,
          `${maxTabSwitch} l·∫ßn`
        );

      return updatedContent;
    };

    // L·∫•y instruction t·ª´ store n·∫øu c√≥, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ form
    const currentInstruction = tab3Data.instruction || form.getValues("instruction");
    const updatedInstruction = updateInstruction(currentInstruction);

    // C·∫≠p nh·∫≠t c·∫£ form v√† store
    form.setValue("instruction", updatedInstruction);
    if (tab3Data.instruction !== updatedInstruction) {
      setInstruction(updatedInstruction);
    }
  }, [tab1Data.duration_minutes, tab1Data.total_questions, tab1Data.max_tab_switch, form, setInstruction, tab3Data.instruction]);

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    setInstruction(values.instruction);
    toast.success("C·∫≠p nh·∫≠t h∆∞·ªõng d·∫´n th√†nh c√¥ng");
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="text-lg font-semibold">C√†i ƒë·∫∑t ƒë·ªÅ thi</CardTitle>
          <CardDescription>C·∫•u h√¨nh c√°c t√πy ch·ªçn cho ƒë·ªÅ thi</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Cho ph√©p xem l·∫°i b√†i</Label>
                <p className="text-sm text-gray-500">Sinh vi√™n c√≥ th·ªÉ xem l·∫°i b√†i sau khi n·ªôp</p>
              </div>
              <Switch checked={tab3Data.allow_review} onCheckedChange={setAllowReview} />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Cho ph√©p xem ƒëi·ªÉm</Label>
                <p className="text-sm text-gray-500">Sinh vi√™n c√≥ th·ªÉ xem ƒëi·ªÉm chi ti·∫øt</p>
              </div>
              <Switch checked={tab3Data.allow_review_point} onCheckedChange={setAllowReviewPoint} />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>X√°o tr·ªôn c√¢u h·ªèi</Label>
                <p className="text-sm text-gray-500">Th·ª© t·ª± c√¢u h·ªèi s·∫Ω ƒë∆∞·ª£c x√°o tr·ªôn cho m·ªói sinh vi√™n</p>
              </div>
              <Switch checked={tab3Data.is_shuffled_questions} onCheckedChange={setIsShuffledQuestions} />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>X√°o tr·ªôn ph∆∞∆°ng √°n</Label>
                <p className="text-sm text-gray-500">Th·ª© t·ª± c√°c ph∆∞∆°ng √°n tr·∫£ l·ªùi s·∫Ω ƒë∆∞·ª£c x√°o tr·ªôn</p>
              </div>
              <Switch checked={tab3Data.is_shuffled_answer} onCheckedChange={setIsShuffledAnswer} />
            </div>
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng</Label>
                <p className="text-sm text-gray-500">Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng sau khi n·ªôp b√†i</p>
              </div>
              <Switch checked={tab3Data.show_correct_answer} onCheckedChange={setShowCorrectAnswer} />
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg font-semibold">Quy ƒë·ªãnh thi</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="instruction"
                render={({ field }) => (
                  <div className="space-y-2">
                    <QuillEditor
                      form={form}
                      name={field.name}
                      label=""
                      placeholder="Nh·∫≠p n·ªôi dung quy ƒë·ªãnh thi..."
                    />
                  </div>
                )}
              />
              <Button type="submit" className="bg-black text-white hover:bg-black/80 float-right">
                L∆∞u h∆∞·ªõng d·∫´n
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}